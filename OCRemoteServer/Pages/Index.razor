@page "/"
@using System.Timers
@using System.Numerics
@using System.Text.Json
@using Humanizer
@using System.Globalization
@using Humanizer.Localisation
@using Blazorise.Charts
@using Blazorise.Charts.Streaming


@implements IDisposable
<PageTitle>Index</PageTitle>

<h1>G T N H</h1>

<div style="white-space: pre-line; line-height: 120%">@((MarkupString)energyStatus)</div>

<BSTable>
    <BSTBody>
        <BSTR style="display: flex;">
            <BSTD style="flex:1; box-sizing: border-box">
                <h3>Realtime Chart</h3>
                <LineChart Style="max-width: 100%; max-height: 260px; box-sizing:border-box" @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
                    <ChartStreaming TItem="LiveDataPoint"
                                    Options="new ChartStreamingOptions { Delay = 3500, FrameRate=60, Duration = 40000 }"
                                    Refreshed="@OnHorizontalLineRefreshed" />
                </LineChart>
            </BSTD>
            <BSTD style="flex:1; box-sizing: border-box">
                <h3>Wireless Trend (3h)</h3>
                <LineChart Style="max-width: 100%; max-height: 260px; box-sizing:border-box" @ref="wirelessChart" TItem="LiveDataPoint" OptionsObject="@wirelessChartOptions"/>
            </BSTD>

        </BSTR>
        <BSTR style="display: flex;">

            <BSTD style="flex:1; box-sizing: border-box">
                <h3>Hourly Chart</h3>
                <LineChart Style="max-width: 100%; max-height: 260px; box-sizing:border-box" @ref="horizontalLineChart3" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions"
                />
            </BSTD>
            <BSTD style="flex:1; box-sizing: border-box">
                <h3>Daily Chart</h3>
                <LineChart Style="max-width: 100%; max-height: 260px; box-sizing:border-box" @ref="horizontalLineChart2" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions"
                />
            </BSTD>
        </BSTR>
    </BSTBody>
</BSTable>




<br/>
<br/>
<br/>
<br/>
<br/>

@code
{
    LineChart<LiveDataPoint> horizontalLineChart;
    LineChart<LiveDataPoint> horizontalLineChart2;
    LineChart<LiveDataPoint> horizontalLineChart3;
    LineChart<LiveDataPoint> wirelessChart;
    Random random = new Random(DateTime.Now.Millisecond);

    string[] Labels = { };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }

    object horizontalLineChartOptions = new
    {
        Scales = new
        {
            X = new
            {
                type = "time",
                time = new {
                    displayFormats = new {
                    quarter = "MMM YYYY"
            }
        }
            },
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "A MAX"
                },
                BeginAtZero = true
            }
        },
        Interaction = new
        {
            intersect = false
        },
        Plugins = new
        {
            Zoom = new
            {
                Zoom = new
                {
                    wheel = new
                    {
                        Enabled = true,

                    },
                    Mode = "x"
                },
                Pan = new
                {
                    Enabled = true,
                    Mode = "x"
                }
            }
        }
    };

    object wirelessChartOptions = new
    {
        Scales = new
        {
            X = new
            {
                type = "time",
                time = new {
                    displayFormats = new {
                        quarter = "MMM YYYY"
                    }
                }
            },
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "Ah MAX"
                },
                BeginAtZero = false
            }
        },
        Interaction = new
        {
            intersect = false
        },
        Plugins = new
        {
            Zoom = new
            {
                Zoom = new
                {
                    wheel = new
                    {
                        Enabled = true,

                    },
                    Mode = "x"
                },
                Pan = new
                {
                    Enabled = true,
                    Mode = "x"
                }
            }
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
                HandleRedraw(horizontalLineChart, GetLineChartDataset1, GetLineChartDataset2),
                HandleRedraw(horizontalLineChart2, GetLineChartDataset1_daily, GetLineChartDataset2_daily),
                HandleRedraw(horizontalLineChart3, GetLineChartDataset1_hourly, GetLineChartDataset2_hourly),
                HandleRedraw(wirelessChart, GetWirelessDataset1)
                
                );
        }
    }
    LineChartDataset<LiveDataPoint> GetWirelessDataset1()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        var avger = new List<LiveDataPoint>();

        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddHours(-3) < x.Date)))
        {
            avger.Add((new LiveDataPoint()
            {
                X = dateTime,
                Y = (long)(wireless / 2147483600 / 3600 / 20),
            }));
            if (avger.Count > 50)
            {
                liveDataPoints.Add(
                    new LiveDataPoint()
                    {
                        X = avger[0].X,
                        Y = avger[0].Y
                    }
                    );
                avger.Clear();
            }
        }

        return new LineChartDataset<LiveDataPoint>
        {
            Data = liveDataPoints,
            Label = "Ah MAX",
            BackgroundColor = backgroundColors[2],
            BorderColor = borderColors[2],
            Fill = false,
            Tension = 0.5f,
            BorderDash = new List<int> { 8, 4 },
        };
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets)
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();
        await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSets.Select(x => x.Invoke()).ToArray());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddSeconds(-60) < x.Date)))
        {
            liveDataPoints.Add(new LiveDataPoint()
            {
                X = dateTime,
                Y = (long)(avgIn / 2147483600),
            });
        }

        return new LineChartDataset<LiveDataPoint>
            {
                Data = liveDataPoints,
                Label = "AvgIn (A MAX)",
                BackgroundColor = backgroundColors[1],
                BorderColor = borderColors[1],
                Fill = false,
                Tension = 0.5f,
                BorderDash = new List<int> { 8, 4 },
            };
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset2()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddSeconds(-60) < x.Date)))
        {
            liveDataPoints.Add(new LiveDataPoint()
                {
                    X = dateTime,
                    Y = (long)(avgOut / 2147483600),
                });
        }
        return new LineChartDataset<LiveDataPoint>
        {
            Data = liveDataPoints,
            Label = "AvgOut (A MAX)",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            Tension = 0.5f,
            BorderDash = new List<int> { 8, 4 },
        };
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1_daily()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        var avger = new List<LiveDataPoint>();

        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddHours(-24) < x.Date)))
        {
            avger.Add((new LiveDataPoint()
            {
                X = dateTime,
                Y = (long)(avgIn / 2147483600),
            }));
            if (avger.Count > 240*1.5)
            {
                liveDataPoints.Add(
                    new LiveDataPoint()
                    {
                        X = avger[0].X,
                        Y = (long)avger.Select(x => x.Y).OfType<long>().Average()
                    }
                    );
                avger.Clear();

            }
        }

        return new LineChartDataset<LiveDataPoint>
        {
            Data = liveDataPoints,
            Label = "AvgIn (A MAX)",
            BackgroundColor = backgroundColors[1],
            BorderColor = borderColors[1],
            PointRadius = 0,
            PointHitRadius = 7,
            Fill = false,
            Tension = 0.5f,
            BorderDash = new List<int> { 8, 4 },
        };
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset2_daily()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        var avger = new List<LiveDataPoint>();

        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddHours(-24) < x.Date)))
        {
            avger.Add((new LiveDataPoint()
                {
                    X = dateTime,
                    Y = (long)(avgOut / 2147483600),
                }));
            if (avger.Count > 240*1.5)
            {
                var avg = (long)avger.Select(x => x.Y).OfType<long>().Average();
                liveDataPoints.Add(
                    new LiveDataPoint()
                    {
                        X = avger[0].X,
                            Y = avg < 0 ? 0 : avg
                    }
                    );
                avger.Clear();

            }
        }
        return new LineChartDataset<LiveDataPoint>
        {
            Data = liveDataPoints,
            Label = "AvgOut (A MAX)",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            PointRadius = 0,
            PointHitRadius = 7,
            Fill = false,
            Tension = 0.5f,
            BorderDash = new List<int> { 8, 4 },
        };
    }
    LineChartDataset<LiveDataPoint> GetLineChartDataset1_hourly()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        var avger = new List<LiveDataPoint>();

        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddHours(-1) < x.Date)))
        {
            avger.Add((new LiveDataPoint()
                {
                    X = dateTime,
                    Y = (long)(avgIn / 2147483600),
                }));
            if (avger.Count > 30)
            {
                liveDataPoints.Add(
                    new LiveDataPoint()
                        {
                            X = avger[0].X,
                            Y = (long)avger.Select(x => x.Y).OfType<long>().Average()
                        }
                    );
                avger.Clear();

            }
        }

        return new LineChartDataset<LiveDataPoint>
            {
                Data = liveDataPoints,
                Label = "AvgIn (A MAX)",
                BackgroundColor = backgroundColors[1],
                BorderColor = borderColors[1],
                Fill = false,
                Tension = 0.5f,
                BorderDash = new List<int> { 8, 4 },
            };
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset2_hourly()
    {
        var liveDataPoints = new List<LiveDataPoint>();
        using var ctx = new MyDbContext();
        var avger = new List<LiveDataPoint>();

        foreach (var (avgIn, avgOut, used, total, wireless, dateTime) in ctx.ESReports.Where(x => (DateTime.Now.AddHours(-1) < x.Date)))
        {
            avger.Add((new LiveDataPoint()
                {
                    X = dateTime,
                    Y = (long)(avgOut / 2147483600),
                }));
            if (avger.Count > 30)
            {
                var avg = (long)avger.Select(x => x.Y).OfType<long>().Average();
                liveDataPoints.Add(
                    new LiveDataPoint()
                        {
                            X = avger[0].X,
                            Y = avg < 0 ? 0 : avg

                        }
                    );
                avger.Clear();

            }
        }
        return new LineChartDataset<LiveDataPoint>
            {
                Data = liveDataPoints,
                Label = "AvgOut (A MAX)",
                BackgroundColor = backgroundColors[0],
                BorderColor = borderColors[0],
                Fill = false,
                Tension = 0.5f,
                BorderDash = new List<int> { 8, 4 },
            };
    }

    Task OnHorizontalLineRefreshed(ChartStreamingData<LiveDataPoint> data)
    {
        try
        {

            var dr = EnergyStationManager.latestValue.ToArray();
        

            if (data.DatasetIndex == 0)
            {

                data.Value = new LiveDataPoint
                {
                    X = dr.Last().Date,
                    Y = (long)(dr.Average(x => x.AvgIn) / 2147483600),
                };   
            }
            else
            {

                data.Value = new LiveDataPoint
                {
                    X = dr.Last().Date,
                    Y = (long)(dr.Average(x => x.AvgOut) / 2147483600),
                };
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        
        return Task.CompletedTask;
    }




    Timer timer = new Timer(1000);
    Timer timer2 = new Timer(60000);
    string energyStatus = "";



    protected override async Task OnInitializedAsync()
    {
        timer.Elapsed += async (s, e) =>
        {
            try
            {
                var r = EnergyStationManager.latestValue;


                var used = r.Average(x => x.Used);
                var total = r.Average(x => x.Total);
                var avgin = r.Average(x => x.AvgIn);
                var avgout = r.Average(x => x.AvgOut);
                var MAX = 2147483600;

                var t = ((total) - (used)) / (avgin - avgout) / 20;
                if (t < 0)
                {
                    t = ((used)) / (avgin - avgout) / 20;
                }
                TimeSpan ts = TimeSpan.Zero;
                bool failed = false;
                try
                {
                    ts = TimeSpan.FromSeconds((double) t);
                }
                catch (Exception e1)
                {
                    failed = true;
                }
                using var ctx = new MyDbContext();
                var count = ctx.ESReports.Count();
                var mainStorage = (double)EnergyStationManager.lastMainStorage;
                var wireless = EnergyStationManager.latestValue.Last().Wireless;
                energyStatus = $"Wireless: <strong>{wireless:N0} EU ({wireless:g2})</strong> ({wireless / 2147483600 / 3600 / 20:N0} Ah MAX)\n" +
                               $"Stored：{used:N0} EU ({used / total:P5}) <strong>({used / 2147483600 / 3600 / 20:N0} Ah MAX)</strong>\n" +
                               $"Main Storage：{mainStorage:N0} EU ({mainStorage / total:P5}) <strong>({mainStorage / 2147483600 / 3600 / 20:N0} Ah MAX)</strong>\n" +
                               $"Avg In (5s)： {avgin:N0} EU/t <strong>({avgin / MAX:N0} A MAX)</strong>\n" +
                               $"Avg Out (5s)：{avgout:N0} EU/t <strong>({avgout / MAX:N0} A MAX)</strong>\n" +
                               $"Requires {(failed ? ((double)(t / 60 / 60) / 24.0).ToString("F1") + " days" : ts.Humanize(/*culture: new CultureInfo("zh-Hans"),*/ maxUnit: TimeUnit.Month, minUnit: TimeUnit.Second))} to be {(t > 0 ? "filled": "*discharged*")}\n"
                               ;

                InvokeAsync(StateHasChanged);
            }
            catch (Exception e1)
            {
                Console.WriteLine(e1);
            }
        };
        timer.Start();
        timer2.Elapsed += (s, e) =>
        {
            HandleRedraw(horizontalLineChart2, GetLineChartDataset1_daily, GetLineChartDataset2_daily);
            HandleRedraw(horizontalLineChart3, GetLineChartDataset1_hourly, GetLineChartDataset2_hourly);
            HandleRedraw(wirelessChart, GetWirelessDataset1);
            InvokeAsync(StateHasChanged);
        };
        timer2.Start();
    }

    public void Dispose()
    {
        timer.Dispose();
        timer2.Dispose();
    }
}
